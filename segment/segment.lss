
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003a6  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e8  00000000  00000000  0000053b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002e5  00000000  00000000  00000623  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000af  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000200  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	66 c0       	rjmp	.+204    	; 0x102 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  38:	ef 92       	push	r14
  3a:	ff 92       	push	r15
  3c:	0f 93       	push	r16
  3e:	1f 93       	push	r17
DDRD=0xFF;
  40:	8f ef       	ldi	r24, 0xFF	; 255
  42:	81 bb       	out	0x11, r24	; 17
while(1)
{
PORTD=0b00111111;
  44:	9f e3       	ldi	r25, 0x3F	; 63
  46:	e9 2e       	mov	r14, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  48:	29 e1       	ldi	r18, 0x19	; 25
  4a:	30 e0       	ldi	r19, 0x00	; 0
_delay_ms(1000);
PORTD=0b00000110;
  4c:	86 e0       	ldi	r24, 0x06	; 6
  4e:	f8 2e       	mov	r15, r24
_delay_ms(1000);
PORTD=0b01011011;
  50:	0b e5       	ldi	r16, 0x5B	; 91
_delay_ms(1000);
PORTD=0b01001111;
  52:	1f e4       	ldi	r17, 0x4F	; 79
_delay_ms(1000);
PORTD=0b01100110;
  54:	b6 e6       	ldi	r27, 0x66	; 102
_delay_ms(1000);
PORTD=0b01101101;
  56:	ad e6       	ldi	r26, 0x6D	; 109
_delay_ms(1000);
PORTD=0b01111101;
  58:	7d e7       	ldi	r23, 0x7D	; 125
_delay_ms(1000);
PORTD=0b00000111;
  5a:	67 e0       	ldi	r22, 0x07	; 7
_delay_ms(1000);
PORTD=0b01111111;
  5c:	5f e7       	ldi	r21, 0x7F	; 127
_delay_ms(1000);
PORTD=0b01101111;
  5e:	4f e6       	ldi	r20, 0x6F	; 111
int main()
{
DDRD=0xFF;
while(1)
{
PORTD=0b00111111;
  60:	e2 ba       	out	0x12, r14	; 18
  62:	80 e1       	ldi	r24, 0x10	; 16
  64:	97 e2       	ldi	r25, 0x27	; 39
  66:	f9 01       	movw	r30, r18
  68:	31 97       	sbiw	r30, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  6c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  6e:	d9 f7       	brne	.-10     	; 0x66 <__SREG__+0x27>
_delay_ms(1000);
PORTD=0b00000110;
  70:	f2 ba       	out	0x12, r15	; 18
  72:	80 e1       	ldi	r24, 0x10	; 16
  74:	97 e2       	ldi	r25, 0x27	; 39
  76:	f9 01       	movw	r30, r18
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <__SREG__+0x39>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7e:	d9 f7       	brne	.-10     	; 0x76 <__SREG__+0x37>
_delay_ms(1000);
PORTD=0b01011011;
  80:	02 bb       	out	0x12, r16	; 18
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	97 e2       	ldi	r25, 0x27	; 39
  86:	f9 01       	movw	r30, r18
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <__SREG__+0x49>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8e:	d9 f7       	brne	.-10     	; 0x86 <__SREG__+0x47>
_delay_ms(1000);
PORTD=0b01001111;
  90:	12 bb       	out	0x12, r17	; 18
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	97 e2       	ldi	r25, 0x27	; 39
  96:	f9 01       	movw	r30, r18
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <__SREG__+0x59>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9e:	d9 f7       	brne	.-10     	; 0x96 <__SREG__+0x57>
_delay_ms(1000);
PORTD=0b01100110;
  a0:	b2 bb       	out	0x12, r27	; 18
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	97 e2       	ldi	r25, 0x27	; 39
  a6:	f9 01       	movw	r30, r18
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <__SREG__+0x69>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__SREG__+0x67>
_delay_ms(1000);
PORTD=0b01101101;
  b0:	a2 bb       	out	0x12, r26	; 18
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	97 e2       	ldi	r25, 0x27	; 39
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <__SREG__+0x79>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <__SREG__+0x77>
_delay_ms(1000);
PORTD=0b01111101;
  c0:	72 bb       	out	0x12, r23	; 18
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	97 e2       	ldi	r25, 0x27	; 39
  c6:	f9 01       	movw	r30, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <__SREG__+0x89>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__SREG__+0x87>
_delay_ms(1000);
PORTD=0b00000111;
  d0:	62 bb       	out	0x12, r22	; 18
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	97 e2       	ldi	r25, 0x27	; 39
  d6:	f9 01       	movw	r30, r18
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <__SREG__+0x99>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  de:	d9 f7       	brne	.-10     	; 0xd6 <__SREG__+0x97>
_delay_ms(1000);
PORTD=0b01111111;
  e0:	52 bb       	out	0x12, r21	; 18
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	97 e2       	ldi	r25, 0x27	; 39
  e6:	f9 01       	movw	r30, r18
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <__SREG__+0xa9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__SREG__+0xa7>
_delay_ms(1000);
PORTD=0b01101111;
  f0:	42 bb       	out	0x12, r20	; 18
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	97 e2       	ldi	r25, 0x27	; 39
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__SREG__+0xb9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <__SREG__+0xb7>
 100:	af cf       	rjmp	.-162    	; 0x60 <__SREG__+0x21>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
