
switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000083  00000000  00000000  000000fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004e  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ad  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000006b  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1a c0       	rjmp	.+52     	; 0x6a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
int main()
{
int a=0;
/*DDRB=0b00000011;
PORTB=0b00000100;*/
DDRB |=(1<<PINB0);
  38:	b8 9a       	sbi	0x17, 0	; 23
DDRB |=(1<<PINB1);
  3a:	b9 9a       	sbi	0x17, 1	; 23
DDRB &=~(1<<PINB2);
  3c:	ba 98       	cbi	0x17, 2	; 23
PORTB |=(1<<PINB2);
  3e:	c2 9a       	sbi	0x18, 2	; 24
PORTB |=(1<<PINB1);
  40:	c1 9a       	sbi	0x18, 1	; 24
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
if(bit_is_clear(PINB,2))
{
if(a==0)
{
//PORTB=0b00000001;
PORTB ^=(1<<PINB0);
  46:	31 e0       	ldi	r19, 0x01	; 1
PORTB ^=(1<<PINB1);
  48:	22 e0       	ldi	r18, 0x02	; 2
DDRB |=(1<<PINB1);
DDRB &=~(1<<PINB2);
PORTB |=(1<<PINB2);
PORTB |=(1<<PINB1);
while(1)
if(bit_is_clear(PINB,2))
  4a:	b2 9b       	sbis	0x16, 2	; 22
  4c:	03 c0       	rjmp	.+6      	; 0x54 <__SREG__+0x15>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	fb cf       	rjmp	.-10     	; 0x4a <__SREG__+0xb>
{
if(a==0)
  54:	00 97       	sbiw	r24, 0x00	; 0
  56:	c9 f7       	brne	.-14     	; 0x4a <__SREG__+0xb>
{
//PORTB=0b00000001;
PORTB ^=(1<<PINB0);
  58:	88 b3       	in	r24, 0x18	; 24
  5a:	83 27       	eor	r24, r19
  5c:	88 bb       	out	0x18, r24	; 24
PORTB ^=(1<<PINB1);
  5e:	88 b3       	in	r24, 0x18	; 24
  60:	82 27       	eor	r24, r18
  62:	88 bb       	out	0x18, r24	; 24
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	f0 cf       	rjmp	.-32     	; 0x4a <__SREG__+0xb>

0000006a <_exit>:
  6a:	f8 94       	cli

0000006c <__stop_program>:
  6c:	ff cf       	rjmp	.-2      	; 0x6c <__stop_program>
