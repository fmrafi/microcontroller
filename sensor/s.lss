
s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000e7  00000000  00000000  00000141  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000084  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012a  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000081  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	2f c0       	rjmp	.+94     	; 0x94 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<util/delay.h> 
int adc_init(); 
int adc_read(); 
int main()
{
DDRB=0xff; 
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
PORTB=0xff; 
}
}
int adc_init() 
{
ADMUX |=(1 << REFS1) | (1 << REFS0);
  3c:	87 b1       	in	r24, 0x07	; 7
  3e:	80 6c       	ori	r24, 0xC0	; 192
  40:	87 b9       	out	0x07, r24	; 7
ADCSRA |=(1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  42:	86 b1       	in	r24, 0x06	; 6
  44:	87 60       	ori	r24, 0x07	; 7
  46:	86 b9       	out	0x06, r24	; 6
ADCSRA |=(1 << ADEN);
  48:	37 9a       	sbi	0x06, 7	; 6
if (adc_value<60)
PORTB=0b00000001; 
else if(adc_value>82) 
PORTB=0b00000010; 
else
PORTB=0xff; 
  4a:	4f ef       	ldi	r20, 0xFF	; 255
{
int adc_value=adc_read();
if (adc_value<60)
PORTB=0b00000001; 
else if(adc_value>82) 
PORTB=0b00000010; 
  4c:	32 e0       	ldi	r19, 0x02	; 2
adc_init(); 
while(1)
{
int adc_value=adc_read();
if (adc_value<60)
PORTB=0b00000001; 
  4e:	21 e0       	ldi	r18, 0x01	; 1
ADCSRA |=(1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
ADCSRA |=(1 << ADEN);
}
int adc_read() 
{
ADMUX |=(1 << MUX0);
  50:	38 9a       	sbi	0x07, 0	; 7
ADCSRA |=(1 << ADSC);
  52:	36 9a       	sbi	0x06, 6	; 6
while(ADCSRA & (1<<ADSC));
  54:	36 99       	sbic	0x06, 6	; 6
  56:	fe cf       	rjmp	.-4      	; 0x54 <__SREG__+0x15>
return ADC;
  58:	84 b1       	in	r24, 0x04	; 4
  5a:	95 b1       	in	r25, 0x05	; 5
DDRB=0xff; 
adc_init(); 
while(1)
{
int adc_value=adc_read();
if (adc_value<60)
  5c:	8c 33       	cpi	r24, 0x3C	; 60
  5e:	91 05       	cpc	r25, r1
  60:	14 f4       	brge	.+4      	; 0x66 <__SREG__+0x27>
PORTB=0b00000001; 
  62:	28 bb       	out	0x18, r18	; 24
  64:	f5 cf       	rjmp	.-22     	; 0x50 <__SREG__+0x11>
else if(adc_value>82) 
  66:	83 35       	cpi	r24, 0x53	; 83
  68:	91 05       	cpc	r25, r1
  6a:	14 f0       	brlt	.+4      	; 0x70 <__SREG__+0x31>
PORTB=0b00000010; 
  6c:	38 bb       	out	0x18, r19	; 24
  6e:	f0 cf       	rjmp	.-32     	; 0x50 <__SREG__+0x11>
else
PORTB=0xff; 
  70:	48 bb       	out	0x18, r20	; 24
  72:	ee cf       	rjmp	.-36     	; 0x50 <__SREG__+0x11>

00000074 <adc_init>:
}
}
int adc_init() 
{
ADMUX |=(1 << REFS1) | (1 << REFS0);
  74:	87 b1       	in	r24, 0x07	; 7
  76:	80 6c       	ori	r24, 0xC0	; 192
  78:	87 b9       	out	0x07, r24	; 7
ADCSRA |=(1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	87 60       	ori	r24, 0x07	; 7
  7e:	86 b9       	out	0x06, r24	; 6
ADCSRA |=(1 << ADEN);
  80:	37 9a       	sbi	0x06, 7	; 6
}
  82:	08 95       	ret

00000084 <adc_read>:
int adc_read() 
{
ADMUX |=(1 << MUX0);
  84:	38 9a       	sbi	0x07, 0	; 7
ADCSRA |=(1 << ADSC);
  86:	36 9a       	sbi	0x06, 6	; 6
while(ADCSRA & (1<<ADSC));
  88:	36 99       	sbic	0x06, 6	; 6
  8a:	fe cf       	rjmp	.-4      	; 0x88 <adc_read+0x4>
return ADC;
  8c:	24 b1       	in	r18, 0x04	; 4
  8e:	35 b1       	in	r19, 0x05	; 5
  90:	c9 01       	movw	r24, r18
  92:	08 95       	ret

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
