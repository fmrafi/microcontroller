
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000438  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000019b  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b18  00000000  00000000  000006ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002b7  00000000  00000000  000011c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000707  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000022d  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000063c  00000000  00000000  00001f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	32 c0       	rjmp	.+100    	; 0x66 <__ctors_end>
   2:	44 c0       	rjmp	.+136    	; 0x8c <__bad_interrupt>
   4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
   6:	42 c0       	rjmp	.+132    	; 0x8c <__bad_interrupt>
   8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
   a:	40 c0       	rjmp	.+128    	; 0x8c <__bad_interrupt>
   c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
   e:	3e c0       	rjmp	.+124    	; 0x8c <__bad_interrupt>
  10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
  12:	3c c0       	rjmp	.+120    	; 0x8c <__bad_interrupt>
  14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
  16:	3a c0       	rjmp	.+116    	; 0x8c <__bad_interrupt>
  18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
  1a:	38 c0       	rjmp	.+112    	; 0x8c <__bad_interrupt>
  1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
  1e:	36 c0       	rjmp	.+108    	; 0x8c <__bad_interrupt>
  20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
  22:	34 c0       	rjmp	.+104    	; 0x8c <__bad_interrupt>
  24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>

00000026 <LcdCustomChar>:
  26:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  36:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  46:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  56:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d4 e0       	ldi	r29, 0x04	; 4
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e8 e3       	ldi	r30, 0x38	; 56
  7a:	f4 e0       	ldi	r31, 0x04	; 4
  7c:	02 c0       	rjmp	.+4      	; 0x82 <.do_copy_data_start>

0000007e <.do_copy_data_loop>:
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0

00000082 <.do_copy_data_start>:
  82:	a4 38       	cpi	r26, 0x84	; 132
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <.do_copy_data_loop>
  88:	02 d0       	rcall	.+4      	; 0x8e <main>
  8a:	d4 c1       	rjmp	.+936    	; 0x434 <_exit>

0000008c <__bad_interrupt>:
  8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <main>:
char value[]={"151311051"};


int main()
{
LCDinit();
  8e:	ea d0       	rcall	.+468    	; 0x264 <LCDinit>
//LCDcursorOn();
//LCDcursorOnBlink();
//LCDhome();
LCDGotoXY(6,0);
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	a2 d0       	rcall	.+324    	; 0x1da <LCDGotoXY>
LCDstring(name1,2);
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	8a d0       	rcall	.+276    	; 0x1b2 <LCDstring>
LCDGotoXY(3,1);
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	9b d0       	rcall	.+310    	; 0x1da <LCDGotoXY>
LCDstring(name2,8);
  a4:	83 e6       	ldi	r24, 0x63	; 99
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	68 e0       	ldi	r22, 0x08	; 8
  aa:	83 d0       	rcall	.+262    	; 0x1b2 <LCDstring>
  ac:	80 e1       	ldi	r24, 0x10	; 16
  ae:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	29 e1       	ldi	r18, 0x19	; 25
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0x26>
_delay_ms(1000);
LCDclr();
  be:	73 d0       	rcall	.+230    	; 0x1a6 <LCDclr>
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	97 e2       	ldi	r25, 0x27	; 39
  c4:	29 e1       	ldi	r18, 0x19	; 25
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <main+0x3a>
_delay_ms(1000);
LCDGotoXY(2,0);
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	81 d0       	rcall	.+258    	; 0x1da <LCDGotoXY>
LCDstring(name,12);
  d8:	8c e6       	ldi	r24, 0x6C	; 108
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	6c e0       	ldi	r22, 0x0C	; 12
  de:	69 d0       	rcall	.+210    	; 0x1b2 <LCDstring>
LCDGotoXY(3,1);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	7a d0       	rcall	.+244    	; 0x1da <LCDGotoXY>
LCDstring(value,9);
  e6:	89 e7       	ldi	r24, 0x79	; 121
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	69 e0       	ldi	r22, 0x09	; 9
  ec:	62 d0       	rcall	.+196    	; 0x1b2 <LCDstring>
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	97 e2       	ldi	r25, 0x27	; 39
  f2:	29 e1       	ldi	r18, 0x19	; 25
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x68>
 100:	88 e8       	ldi	r24, 0x88	; 136
 102:	93 e1       	ldi	r25, 0x13	; 19
 104:	29 e1       	ldi	r18, 0x19	; 25
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d9 f7       	brne	.-10     	; 0x108 <main+0x7a>
 112:	80 e1       	ldi	r24, 0x10	; 16
 114:	97 e2       	ldi	r25, 0x27	; 39
 116:	29 e1       	ldi	r18, 0x19	; 25
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 122:	d9 f7       	brne	.-10     	; 0x11a <main+0x8c>
/*for(int i=0;i<=15;i++)
{
LCDshiftLeft(1);
_delay_ms(200);
}*/
}
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret

0000012a <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 12a:	28 2f       	mov	r18, r24
 12c:	20 7f       	andi	r18, 0xF0	; 240
 12e:	22 bb       	out	0x12, r18	; 18
	LCP|=1<<LCD_RS;
 130:	90 9a       	sbi	0x12, 0	; 18
	LCP|=1<<LCD_E;		
 132:	93 9a       	sbi	0x12, 3	; 18
 134:	2a ef       	ldi	r18, 0xFA	; 250
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 13e:	93 98       	cbi	0x12, 3	; 18
	LCP&=~(1<<LCD_RS);
 140:	90 98       	cbi	0x12, 0	; 18
 142:	f9 01       	movw	r30, r18
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	44 e0       	ldi	r20, 0x04	; 4
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	4a 95       	dec	r20
 152:	e1 f7       	brne	.-8      	; 0x14c <LCDsendChar+0x22>
 154:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_RS;
 156:	90 9a       	sbi	0x12, 0	; 18
	LCP|=1<<LCD_E;		
 158:	93 9a       	sbi	0x12, 3	; 18
 15a:	c9 01       	movw	r24, r18
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 160:	93 98       	cbi	0x12, 3	; 18
	LCP&=~(1<<LCD_RS);
 162:	90 98       	cbi	0x12, 0	; 18
 164:	c9 01       	movw	r24, r18
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 16a:	08 95       	ret

0000016c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 16c:	28 2f       	mov	r18, r24
 16e:	20 7f       	andi	r18, 0xF0	; 240
 170:	22 bb       	out	0x12, r18	; 18
	LCP|=1<<LCD_E;		
 172:	93 9a       	sbi	0x12, 3	; 18
 174:	2a ef       	ldi	r18, 0xFA	; 250
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 17e:	93 98       	cbi	0x12, 3	; 18
 180:	f9 01       	movw	r30, r18
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	54 e0       	ldi	r21, 0x04	; 4
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	5a 95       	dec	r21
 190:	e1 f7       	brne	.-8      	; 0x18a <LCDsendCommand+0x1e>
 192:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_E;		
 194:	93 9a       	sbi	0x12, 3	; 18
 196:	c9 01       	movw	r24, r18
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 19c:	93 98       	cbi	0x12, 3	; 18
 19e:	c9 01       	movw	r24, r18
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 1a4:	08 95       	ret

000001a6 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	e1 df       	rcall	.-62     	; 0x16c <LCDsendCommand>
}
 1aa:	08 95       	ret

000001ac <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	de df       	rcall	.-68     	; 0x16c <LCDsendCommand>
}
 1b0:	08 95       	ret

000001b2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	41 f0       	breq	.+16     	; 0x1d0 <LCDstring+0x1e>
 1c0:	ec 01       	movw	r28, r24
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <LCDstring+0x1a>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 1c6:	89 91       	ld	r24, Y+
 1c8:	b0 df       	rcall	.-160    	; 0x12a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
 1cc:	10 17       	cp	r17, r16
 1ce:	d8 f3       	brcs	.-10     	; 0x1c6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1da:	62 30       	cpi	r22, 0x02	; 2
 1dc:	31 f0       	breq	.+12     	; 0x1ea <LCDGotoXY+0x10>
 1de:	63 30       	cpi	r22, 0x03	; 3
 1e0:	31 f0       	breq	.+12     	; 0x1ee <LCDGotoXY+0x14>
 1e2:	61 30       	cpi	r22, 0x01	; 1
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1e6:	80 5c       	subi	r24, 0xC0	; 192
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1ea:	8c 5e       	subi	r24, 0xEC	; 236
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1ee:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	bc df       	rcall	.-136    	; 0x16c <LCDsendCommand>
	
}
 1f4:	08 95       	ret

000001f6 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 200:	64 2f       	mov	r22, r20
 202:	eb df       	rcall	.-42     	; 0x1da <LCDGotoXY>
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <CopyStringtoLCD+0x16>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 208:	90 df       	rcall	.-224    	; 0x12a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 20a:	1f 5f       	subi	r17, 0xFF	; 255
 20c:	fe 01       	movw	r30, r28
 20e:	e1 0f       	add	r30, r17
 210:	f1 1d       	adc	r31, r1
 212:	84 91       	lpm	r24, Z+
 214:	88 23       	and	r24, r24
 216:	c1 f7       	brne	.-16     	; 0x208 <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	08 95       	ret

00000220 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	7c 01       	movw	r14, r24
 22e:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 230:	11 0f       	add	r17, r17
 232:	11 0f       	add	r17, r17
 234:	11 0f       	add	r17, r17
 236:	10 64       	ori	r17, 0x40	; 64
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 23c:	f7 01       	movw	r30, r14
 23e:	ec 0f       	add	r30, r28
 240:	fd 1f       	adc	r31, r29
 242:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 244:	81 2f       	mov	r24, r17
 246:	8c 0f       	add	r24, r28
 248:	91 df       	rcall	.-222    	; 0x16c <LCDsendCommand>
		LCDsendChar(pcc);
 24a:	80 2f       	mov	r24, r16
 24c:	6e df       	rcall	.-292    	; 0x12a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 24e:	21 96       	adiw	r28, 0x01	; 1
 250:	c8 30       	cpi	r28, 0x08	; 8
 252:	d1 05       	cpc	r29, r1
 254:	99 f7       	brne	.-26     	; 0x23c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	08 95       	ret

00000264 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	86 ea       	ldi	r24, 0xA6	; 166
 26c:	9e e0       	ldi	r25, 0x0E	; 14
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 272:	12 ba       	out	0x12, r1	; 18
	LCP=0x00;
 274:	12 ba       	out	0x12, r1	; 18
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 276:	81 b3       	in	r24, 0x11	; 17
 278:	80 6f       	ori	r24, 0xF0	; 240
 27a:	81 bb       	out	0x11, r24	; 17
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 27c:	81 b3       	in	r24, 0x11	; 17
 27e:	8d 60       	ori	r24, 0x0D	; 13
 280:	81 bb       	out	0x11, r24	; 17
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 286:	93 9a       	sbi	0x12, 3	; 18
 288:	2a ef       	ldi	r18, 0xFA	; 250
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 292:	93 98       	cbi	0x12, 3	; 18
 294:	f9 01       	movw	r30, r18
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 29a:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 29c:	93 9a       	sbi	0x12, 3	; 18
 29e:	c9 01       	movw	r24, r18
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2a4:	93 98       	cbi	0x12, 3	; 18
 2a6:	c9 01       	movw	r24, r18
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 2ac:	80 e2       	ldi	r24, 0x20	; 32
 2ae:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2b0:	93 9a       	sbi	0x12, 3	; 18
 2b2:	c9 01       	movw	r24, r18
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2b8:	93 98       	cbi	0x12, 3	; 18
 2ba:	c9 01       	movw	r24, r18
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	54 df       	rcall	.-344    	; 0x16c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	52 df       	rcall	.-348    	; 0x16c <LCDsendCommand>
 2c8:	c6 e2       	ldi	r28, 0x26	; 38
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2ce:	16 2f       	mov	r17, r22
 2d0:	1f 5f       	subi	r17, 0xFF	; 255
 2d2:	ce 01       	movw	r24, r28
 2d4:	a5 df       	rcall	.-182    	; 0x220 <LCDdefinechar>
 2d6:	28 96       	adiw	r28, 0x08	; 8
 2d8:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2da:	18 30       	cpi	r17, 0x08	; 8
 2dc:	c1 f7       	brne	.-16     	; 0x2ce <LCDinit+0x6a>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	08 2f       	mov	r16, r24
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <LCDshiftLeft+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 2f0:	8e e1       	ldi	r24, 0x1E	; 30
 2f2:	3c df       	rcall	.-392    	; 0x16c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 2f4:	1f 5f       	subi	r17, 0xFF	; 255
 2f6:	10 17       	cp	r17, r16
 2f8:	d8 f3       	brcs	.-10     	; 0x2f0 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	08 2f       	mov	r16, r24
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	03 c0       	rjmp	.+6      	; 0x310 <LCDshiftRight+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 30a:	88 e1       	ldi	r24, 0x18	; 24
 30c:	2f df       	rcall	.-418    	; 0x16c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 30e:	1f 5f       	subi	r17, 0xFF	; 255
 310:	10 17       	cp	r17, r16
 312:	d8 f3       	brcs	.-10     	; 0x30a <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 31a:	8e e0       	ldi	r24, 0x0E	; 14
 31c:	27 df       	rcall	.-434    	; 0x16c <LCDsendCommand>
}
 31e:	08 95       	ret

00000320 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	24 df       	rcall	.-440    	; 0x16c <LCDsendCommand>
}
 324:	08 95       	ret

00000326 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	21 df       	rcall	.-446    	; 0x16c <LCDsendCommand>
}
 32a:	08 95       	ret

0000032c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 32c:	88 e0       	ldi	r24, 0x08	; 8
 32e:	1e df       	rcall	.-452    	; 0x16c <LCDsendCommand>
}
 330:	08 95       	ret

00000332 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	1b df       	rcall	.-458    	; 0x16c <LCDsendCommand>
}
 336:	08 95       	ret

00000338 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	08 2f       	mov	r16, r24
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	03 c0       	rjmp	.+6      	; 0x348 <LCDcursorLeft+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	13 df       	rcall	.-474    	; 0x16c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 346:	1f 5f       	subi	r17, 0xFF	; 255
 348:	10 17       	cp	r17, r16
 34a:	d8 f3       	brcs	.-10     	; 0x342 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	08 2f       	mov	r16, r24
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	03 c0       	rjmp	.+6      	; 0x362 <LCDcursorRight+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 35c:	84 e1       	ldi	r24, 0x14	; 20
 35e:	06 df       	rcall	.-500    	; 0x16c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 360:	1f 5f       	subi	r17, 0xFF	; 255
 362:	10 17       	cp	r17, r16
 364:	d8 f3       	brcs	.-10     	; 0x35c <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 37c:	96 e0       	ldi	r25, 0x06	; 6
 37e:	89 9f       	mul	r24, r25
 380:	c0 01       	movw	r24, r0
 382:	11 24       	eor	r1, r1
 384:	24 2f       	mov	r18, r20
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	42 9f       	mul	r20, r18
 38c:	c0 01       	movw	r24, r0
 38e:	43 9f       	mul	r20, r19
 390:	90 0d       	add	r25, r0
 392:	52 9f       	mul	r21, r18
 394:	90 0d       	add	r25, r0
 396:	11 24       	eor	r1, r1
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	39 d0       	rcall	.+114    	; 0x40e <__divmodhi4>
 39c:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 39e:	cb 01       	movw	r24, r22
 3a0:	66 e0       	ldi	r22, 0x06	; 6
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	20 d0       	rcall	.+64     	; 0x3e6 <__udivmodhi4>
 3a6:	e8 2e       	mov	r14, r24
 3a8:	ff 24       	eor	r15, r15
 3aa:	00 e0       	ldi	r16, 0x00	; 0
 3ac:	10 e0       	ldi	r17, 0x00	; 0
 3ae:	11 c0       	rjmp	.+34     	; 0x3d2 <LCDprogressBar+0x66>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3b0:	c8 01       	movw	r24, r16
 3b2:	05 96       	adiw	r24, 0x05	; 5
 3b4:	c8 17       	cp	r28, r24
 3b6:	d9 07       	cpc	r29, r25
 3b8:	10 f0       	brcs	.+4      	; 0x3be <LCDprogressBar+0x52>
 3ba:	85 e0       	ldi	r24, 0x05	; 5
 3bc:	06 c0       	rjmp	.+12     	; 0x3ca <LCDprogressBar+0x5e>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3be:	c0 17       	cp	r28, r16
 3c0:	d1 07       	cpc	r29, r17
 3c2:	10 f0       	brcs	.+4      	; 0x3c8 <LCDprogressBar+0x5c>
 3c4:	8e 2d       	mov	r24, r14
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <LCDprogressBar+0x5e>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3ca:	af de       	rcall	.-674    	; 0x12a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3cc:	f3 94       	inc	r15
 3ce:	0a 5f       	subi	r16, 0xFA	; 250
 3d0:	1f 4f       	sbci	r17, 0xFF	; 255
 3d2:	fd 14       	cp	r15, r13
 3d4:	68 f3       	brcs	.-38     	; 0x3b0 <LCDprogressBar+0x44>
		
		// write character to display
		LCDsendChar(c);
	}

}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	08 95       	ret

000003e6 <__udivmodhi4>:
 3e6:	aa 1b       	sub	r26, r26
 3e8:	bb 1b       	sub	r27, r27
 3ea:	51 e1       	ldi	r21, 0x11	; 17
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <__udivmodhi4_ep>

000003ee <__udivmodhi4_loop>:
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	a6 17       	cp	r26, r22
 3f4:	b7 07       	cpc	r27, r23
 3f6:	10 f0       	brcs	.+4      	; 0x3fc <__udivmodhi4_ep>
 3f8:	a6 1b       	sub	r26, r22
 3fa:	b7 0b       	sbc	r27, r23

000003fc <__udivmodhi4_ep>:
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	5a 95       	dec	r21
 402:	a9 f7       	brne	.-22     	; 0x3ee <__udivmodhi4_loop>
 404:	80 95       	com	r24
 406:	90 95       	com	r25
 408:	bc 01       	movw	r22, r24
 40a:	cd 01       	movw	r24, r26
 40c:	08 95       	ret

0000040e <__divmodhi4>:
 40e:	97 fb       	bst	r25, 7
 410:	09 2e       	mov	r0, r25
 412:	07 26       	eor	r0, r23
 414:	0a d0       	rcall	.+20     	; 0x42a <__divmodhi4_neg1>
 416:	77 fd       	sbrc	r23, 7
 418:	04 d0       	rcall	.+8      	; 0x422 <__divmodhi4_neg2>
 41a:	e5 df       	rcall	.-54     	; 0x3e6 <__udivmodhi4>
 41c:	06 d0       	rcall	.+12     	; 0x42a <__divmodhi4_neg1>
 41e:	00 20       	and	r0, r0
 420:	1a f4       	brpl	.+6      	; 0x428 <__divmodhi4_exit>

00000422 <__divmodhi4_neg2>:
 422:	70 95       	com	r23
 424:	61 95       	neg	r22
 426:	7f 4f       	sbci	r23, 0xFF	; 255

00000428 <__divmodhi4_exit>:
 428:	08 95       	ret

0000042a <__divmodhi4_neg1>:
 42a:	f6 f7       	brtc	.-4      	; 0x428 <__divmodhi4_exit>
 42c:	90 95       	com	r25
 42e:	81 95       	neg	r24
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
